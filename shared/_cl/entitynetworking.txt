--@author ember
--@client

local savedCrcs = setmetatable({}, {
    __index = function(t,k)
        local crc = tonumber(crc(k))
        t[k] = crc
        return crc
    end
})

local function doNothing() end

local activeEnts = {}
local types = setmetatable({}, {
    __index = function(t,k)
        local newType = {
            netcode = doNothing,
            initialized = doNothing,
            deinitialized = doNothing,
            removed = doNothing,
        }
        t[k] = newType
        return newType
    end
})

function entitynetworking.setNetcode(key,cb)
    types[savedCrcs[key]].netcode = cb
end

function entitynetworking.setInitializedCB(key,cb)
    types[savedCrcs[key]].initialized = cb
end

function entitynetworking.setDeinitializedCB(key,cb)
    types[savedCrcs[key]].deinitialized = cb
end

function entitynetworking.setRemovedCB(key,cb)
    types[savedCrcs[key]].removed = cb
end

local ready = false
net.receive("kl:en_init",function()
    ready = true
end)

net.receive("kl:en",function()
    if not ready then return end
    local keyCrc = net.readUInt(32)
    local currType = types[keyCrc]
    if not currType then throw("kl:en| received unregistered type!") end

    while net.readBool() do
        local eid = net.readUInt(13)
        local args = {currType.netcode(eid)}

        local newActiveEnt = {
            initialize = function()
                currType.initialized(eid,unpack(args))
            end,

            deinitialize = function()
                currType.deinitialized(eid,unpack(args))
            end,

            remove = function()
                currType.removed(eid,unpack(args))
                activeEnts[eid] = nil
            end,
        }

        if isValid(entity(eid)) then newActiveEnt.initialize() end
        activeEnts[eid] = newActiveEnt
    end
end)

net.receive("kl:en_r",function()
    local activeEnt = activeEnts[net.readUInt(13)]
    if not activeEnt then return end

    activeEnt.remove()
end)

hook.add("EntityRemoved","kl:en_er",function(ent)
    if not ent then return end
    local activeEnt = activeEnts[ent:entIndex()]
    if not activeEnt then return end

    activeEnt.deinitialize()
end)

hook.add("NetworkEntityCreated","kl:en_nec",function(ent)
    local activeEnt = activeEnts[ent:entIndex()]
    if not activeEnt then return end

    activeEnt.initialize()
end)