--@author ember
--@client

local nullfunc = function() end

local networkedEnts = setmetatable({}, {["__index"] = function(t,k)
    t[k] = {
        initialize = nullfunc,
        deinitialize = nullfunc,
    }
    return t[k]
end})

local CBs = setmetatable({}, {["__index"] = function(t,k)
    t[k] = {
        netcode = nullfunc,
        valid = nullfunc,
        removed = nullfunc,
    }
    return t[k]
end})

function entitynetworking.setNetcode(key,CB)
    CBs[tonumber(crc(key))].netcode = CB
end

function entitynetworking.setInitializedCB(key,CB)
    CBs[tonumber(crc(key))].valid = CB
end

function entitynetworking.setRemovedCB(key,CB)
    CBs[tonumber(crc(key))].removed = CB
end

local i = 0

local lastNW = {}
lastNW.public = {}
lastNW.private = {}
local function receive(type)
    local cachedVars = lastNW[type]

    local updateHash = net.readBool()

    local hash = updateHash and net.readUInt(32) or cachedVars.hash
    local updateNetcode = net.readBool()
    local eid = net.readUInt(13)
    local netcodeReturns = updateNetcode and ({CBs[hash].netcode(eid)} or {}) or cachedVars.netcodeReturns

    networkedEnts[eid] = {
        firstTimeInit = true,
        initialize = function(self)
            local function doInit()
                CBs[hash].valid(eid,self.firstTimeInit,unpack(netcodeReturns))
                self.firstTimeInit = false
            end

            if isValid(entity(eid)) then doInit() return end

            local hookKey = "kl:en_awaitValid_" .. tostring(eid)
            hook.add("tick",hookKey,function()
                if not isValid(entity(eid)) then return end
                doInit()
                hook.remove("tick",hookKey)
            end)
        end,
        deinitialize = function(self)
            CBs[hash].removed(eid,unpack(netcodeReturns))
            networkedEnts[eid] = nil
            hook.remove("tick","kl:en_awaitValid_" .. tostring(eid))
        end
    }

    if isValid(entity(eid)) then
        networkedEnts[eid]:initialize()
    end

    lastNW[type] = {
        hash = hash,
        netcodeReturns = netcodeReturns,
    }
end

net.receive("kl:en_pub",function()
    receive("public")
end)
net.receive("kl:en_pri",function()
    receive("private")
end)

hook.add("NetworkEntityCreated","kl:en_awaitentity",function(ent)
    local eid = ent:entIndex()
    networkedEnts[eid]:initialize()
end)

net.receive("kl:en_er",function()
    local eid = net.readInt(13)
    networkedEnts[eid]:deinitialize()
end)