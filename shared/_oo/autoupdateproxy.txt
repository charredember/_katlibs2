--@author katsu
--@shared
--@owneronly

if SERVER then
    local clFiles = {}
    local clFilesSerialized

    local relayQueue = {}
    local function relayFiles(ply)
        table.insert(relayQueue,coroutine.wrap(function()
            net.start("kl:aup_relay")
            net.writeBStream(clFilesSerialized)
            net.send(ply)
            
            table.remove(relayQueue,1)
            if table.isEmpty(relayQueue) then hook.remove("tick","kl:aup_tick_rf") end
            coroutine.yield()
        end))
        hook.add("tick","kl:aup_tick_rf",function() relayQueue[1]() end)
    end

    local function allFilesReceived()
        if autoupdateproxy.main then autoupdateproxy.main() end
        hook.run("ClientInitialized",owner(),true)
        
        if table.isEmpty(clFiles) then return end

        clFilesSerialized = von.serialize(clFiles)
        clFiles = nil

        relayFiles()
        hook.add("ClientInitialized","kl:aup_ci",function(p,aup)
            if aup then return end
            relayFiles(p)              
        end)
    end

    net.receive("kl:aup_clInit",function(_,ply)
        hook.run("ClientInitialized",ply,true)
    end)

    net.receive("kl:aup_code",function()
        local domain = net.readUInt(2)
        local owneronly = net.readBool()
        local last = net.readBool()
        net.readBStream(function(code)
            if domain ~= 2 then
                local func = loadstring(code)
                func()
            end

            if domain ~= 1 and not owneronly then
                table.insert(clFiles,code)
            end

            if last then allFilesReceived() end

            net.start("kl:aup_code_finish")
            net.send()
        end)
    end)
elseif CLIENT then
    local queue = {}
    function autoupdateproxy.runFile(path,domain,owneronly)
        table.insert(queue,{path=path,domain=domain,owneronly=owneronly})
    end

    timer.simple(0,function() autoupdateproxy.runFile = function() throw("ki:autoupdateproxy| not during runtime") end end)

    hook.add("tick","kl:aup_tick",coroutine.wrap(function()
        repeat
            local path = queue[1].path
            local domain = queue[1].domain
            local owneronly = queue[1].owneronly or false
            table.remove(queue,1)

            local code = file.readInGame("data/starfall/"..path)
            if not code then throw(string.format("ki:autoupdateproxy| cant find code [%s]",path)) end

            if domain ~= 1 then
                local func = loadstring(code)
                func() 
            end

            if owneronly and domain == 2 then return end

            while net.isStreaming() do coroutine.yield() end
            coroutine.yield()

            net.start("kl:aup_code")
            net.writeUInt(domain,2)
            net.writeBool(owneronly)
            net.writeBool(table.isEmpty(queue))
            net.writeBStream(code, true)
            net.send()

            local awaitReceive = true
            net.receive("kl:aup_code_finish",function() awaitReceive = false end)
            while awaitReceive do coroutine.yield() end
        until(#queue == 0)

        hook.remove("tick","kl:aup_tick")
    end))
end