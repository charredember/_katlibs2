--@author katsu
--@shared
--@owneronly

if not net.writeBStream then throw("katlibs:exemanager requires executable loaded before!") end

local function relayExe(ply,exe,remoteID)
    net.start("kl:exemg_relay")
    net.writeUInt(remoteID,13)
    net.writeExecutable(exe)
    net.send(ply)
end

if SERVER then
    local cl_exes = setmetatable({},{__index = function(t,k) local nt = {} t[k] = nt return nt end})

    net.receive("kl:exemg_relay",function()
        local remoteID = net.readUInt(13)
        local remoteEnt = entity(remoteID)
        if not isValid(remoteEnt) then return end

        net.readExecutable(function(exe)
            local sv_exe = exe:cull(false, DOMAIN.SV)
            if sv_exe then sv_exe:run(remoteEnt) sv_exe:destroy() end

            local cl_exe = exe:cull(true, DOMAIN.CL)
            if not cl_exe then return end

            relayExe(nil,cl_exe,remoteID)
            table.insert(cl_exes[remoteID],cl_exe)
        end)
    end)

    hook.add("ClientInitialized","kl:exemg_ci",function(p)
        for remoteID,enttab in pairs(cl_exes) do
            for _,exe in pairs(enttab) do
                relayExe(ply,exe,remoteID)
            end
        end
    end)

    hook.add("EntityRemoved","kl:exemg_er",function(e)
        local eid = e:entIndex()
        local clExesForEnt = cl_exes[eid]
        if not clExesForEnt then return end

        for _,exe in pairs(clExesForEnt) do
            exe:destroy()
        end
        cl_exes[eid] = nil
    end)
elseif CLIENT then
    local queue = {}
    local function queueThink()
        if table.isEmpty(queue) then hook.remove("tick","kl:exemg_tick") return end
        queue[1]()
    end

    function exemanager.distributeFiles(fileTab,remoteEnt)
        local remoteID = remoteEnt and remoteEnt:entIndex() or chip():entIndex()

        local exe = executable:new(remoteID)
        for i = 1,#fileTab do
            local fileData = fileTab[i]

            local path = fileData.path
            local domain = fileData.domain

            exe:addFile(path,domain,fileData.owneronly or false)
        end
        exe:compile()

        table.insert(queue,function()
            local cl_exe = exe:cull(false, DOMAIN.CL)
            remoteEnt = entity(remoteID)
            if cl_exe and isValid(remoteEnt) then
                cl_exe:run(remoteEnt)
                cl_exe:destroy()
            end

            relayExe(nil,exe,remoteID)
            exe:destroy()

            table.remove(queue,1)
        end)
        hook.add("tick","kl:exemg_tick",queueThink)
    end

    function exemanager.parseMainFile(mainFile)
        local
    end
end