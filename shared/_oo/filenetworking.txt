--@author katsu
--@shared
--@owneronly

if not net.writeBStream then throw("katlibs:filenetworking requires netbstream loaded before!") end

local function networkFile(msgName,fpath,data)
    net.start(msgName)
    net.writeString(fpath)
    net.writeBStream(data)
    net.send(owner())
end

filenetworking = {}

if SERVER then
    local cbfuncs = {}

    local function loadFile(path,cbfunc)
        net.start("kl:fn_clfilerequest")
        net.writeString(path)
        net.send(owner())

        cbfuncs[path] = cbfunc
    end

    net.receive("kl:fn_loadedfile",function()
        local path = net.readString()
        net.readBStream(function(data)
            cbfuncs[path](data)
            cbfuncs[path] = nil
        end)
    end)

    net.receive("kl:fn_loadedfile_missing",function()
        local path = net.readString()
        cbfuncs[path](nil)
        cbfuncs[path] = nil
    end)

    --saving
    local function saveFile(fpath,data)
        networkFile("kl:fn_clfilesave",fpath,data)
    end

    --pre client init bullshit
    local preclientQueue = {}

    filenetworking.loadFile = function(...)
        table.insert(preclientQueue,{
            func = loadFile,
            args = {...},
        })
    end

    filenetworking.saveFile = function(...)
        table.insert(preclientQueue,{
            func = saveFile,
            args = {...},
        })
    end

    hook.add("ClientInitialized","kl:fn_ownerloaded",function(p)
        if p == owner() then
            filenetworking.loadFile = loadFile
            filenetworking.saveFile = saveFile

            for _,v in pairs(preclientQueue) do
                v.func(unpack(v.args))
            end

            preclientQueue = nil

            hook.remove("ClientInitialized","kl:fn_ownerloaded")
        end
    end)
elseif CLIENT then
    --loading
    function filenetworking.loadFile(path)
        if file.exists(path) then
            file.asyncRead(path,function(a,status,data)
                if status == FSASYNC.OK then
                    networkFile("kl:fn_loadedfile",path,data)
                else
                    print(Color(255,0,0),"kl:fn| ",Color(255,255,255),"file [" .. path .. "] asyncRead failed with error " .. status)
                end
            end)
        else
            print(Color(255,0,0),"kl:fn| ",Color(255,255,255),"file [" .. path .. "] not found.")
            net.start("kl:fn_loadedfile_missing")
            net.send()
        end
    end

    net.receive("kl:fn_clfilerequest",function()
        local path = net.readString()
        filenetworking.loadFile(path)
    end)

    --saving
    function filenetworking.saveFile(path,data)
        if file.exists(path) then
            print(Color(255,0,0),"kl:fn| ",Color(255,255,255),"overwriting [" .. path .. "]")
        else
            print(Color(255,0,0),"kl:fn| ",Color(255,255,255),"creating new file [" .. path .. "]")

            local dir = string.match(path,".+/")

            if dir ~= nil and not file.isDir(dir) then
                file.createDir(dir)
            end
        end
        file.write(path,data)
    end

    net.receive("kl:fn_clfilesave",function()
        local path = net.readString()
        net.readBStream(function(data)
            filenetworking.saveFile(path,data)
        end)
    end)
end