--@author ember
--@server
--@include _katlibs2/universal/datastructure_queue.txt

if not queue then require("_katlibs2/universal/datastructure_queue.txt") end

local infiniteIndexMM
infiniteIndexMM = function(t,k)
    local newTab = {}
    setmetatable(newTab,{["__index"] = infiniteIndexMM})
    t[k] = newTab
    return newTab
end

local netcodeCBs = {}

local publicEnts = setmetatable({}, {__index = infiniteIndexMM})
-- publicEnts[key][ent]

local privateEnts = setmetatable({}, {__index = infiniteIndexMM})
-- privateEnts[ply][key][ent]

local entLookup = {}
local netMessageQueue = queue:new()

local savedCrcs = setmetatable({}, {
    __index = function(t,k)
        local crc = tonumber(crc(k))
        t[k] = crc
        return crc
    end
})

local function doNothing() end

local function canSend(cost)
    return net.getBitsLeft() - cost > 13333
end

local function sendNowElseQueue(netMessage)
    if not netMessageQueue:any() and netMessage() then return end --try to run it to completion if possible

    netMessageQueue:pushRight(netMessageco)
    hook.add("tick","kl:en_ti",function()
        while true do
            if not netMessageQueue:any() then
                hook.remove("tick","kl:en_ti")
                return
            end

            if netMessageQueue:getLeft()() then
                netMessageQueue:popLeft()
            else
                return
            end
        end
    end)
end

local function doEntChunk(key,entsWithArgs,players)
    local co = coroutine.wrap(function()
        local netActive = false
        local private = (players ~= nil)

        local function netStart()
            if netActive then return end
            netActive = true
            net.start("kl:en")
            net.writeUInt(savedCrcs[key],32)
        end

        local function netEnd()
            if not netActive then return end
            netActive = false
            net.writeBool(false)
            net.send(players)
        end

        local netcode = netcodeCBs[key]
        local cost = netcode and netcode.cost + 13 or 13
        local netcodeFunc = netcode and netcode.netcodeFunc or doNothing

        local plyLookupTab
        if private then
            plyLookupTab = {}
            for i = 1, #players do
                local ply = players[i]
                plyLookupTab[ply] = true
            end
        end

        for ent,args in pairs(entsWithArgs) do
            while not canSend(cost) do
                netEnd()
                coroutine.yield(false)
            end

            netStart()
            net.writeBool(true)
            net.writeUInt(ent:entIndex(),13)
            netcodeFunc()

            local entLookupTab = entLookup[ent] or {
                private = private,
                key = key,
                players = private and {} or nil,
            }

            if private then
                for j = 1, #players do
                    local ply = players[j]
                    privateEnts[ply][key][ent] = args
                end
            else
                publicEnts[key][ent] = args
            end

            entLookup[ent] = entLookupTab
        end
        netEnd()

        coroutine.yield(true)
    end)

    sendNowElseQueue(co)
end

function entitynetworking.setNetcode(key,netcodeFunc,cost)
    netCodeCB = netCodeCB or doNothing
    cost = cost or 0

    netcodeCBs[key] = {
        netcodeFunc = netcodeFunc,
        cost = cost,
    }
end

local function setupEnts(ents,...)
    local result = {}
    for i = 1,#ents do
        local ent = ents[i]
        result[ent] = {...}
    end
    return result
end

function entitynetworking.broadcast(key,ents,...)
    if ents.entIndex then ents = {ents} end
    doEntChunk(key,setupEnts(ents,...))
end

function entitynetworking.send(players,key,ents,...)
    if ents.entIndex then ents = {ents} end
    doEntChunk(key,setupEnts(ents,...),players)
end

function entitynetworking.unregister(ent)
    local entData = entLookup[ent]
    if not entData then return end
    entLookup[ent] = nil

    local key = entData.key

    if entData.private then
        local players = entData.players
        for i = 1,#players do
            local ply = players[i]
            if not isValid(ply) then continue end
            privateEnts[ply][key][ent] = nil
        end
    else
        publicEnts[key][ent] = nil
    end

    sendNowElseQueue(function()
        if not canSend(20) then return false end
        net.start("kl:en_r")
        net.writeUInt(ent:entIndex(),13)
        net.send()
        return true
    end)
end

hook.add("ClientInitialized","kl:en_ci",function(ply)
    sendNowElseQueue(function()
        if not canSend(80) then return false end
        net.start("kl:en_init")
        net.send()
        return true
    end)

    local players = {ply}
    for key,entsWithArgs in pairs(publicEnts) do
        doEntChunk(key,entsWithArgs,players)
    end

    local privEntList = privateEnts[ply]
    if not privEntList then return end
    for key,entsWithArgs in pairs(privEntList) do
        doEntChunk(key,entsWithArgs,players)
    end
end)

local unregister = entitynetworking.unregister
hook.add("EntityRemoved","kl:en_er",function(ent)
    unregister(ent)
end)