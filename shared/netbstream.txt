--@author katsu
--@shared

local NETLIMIT_FLOOR = 1000 --send at least this much per message
local old_net_send = net.send

local sendQueue = {}
local ID = -1
function net.writeBStream(data,compress)
    if compress == nil then compress = true end
    if compress then data = bit.compress(data) end
    net.writeBool(compress)

    ID = ID + 1
    local streamID = ID
    net.writeUInt(streamID,32)

    net.send = function(ply)
        local dataSize = #data
        local dataPtr = 0

        local co = coroutine.wrap(function()
            repeat
                local bytesLeft
                repeat
                    bytesLeft = math.floor(net.getBytesLeft() / 1.2)
                    local awaitNet = (bytesLeft < NETLIMIT_FLOOR)
                    if awaitNet then coroutine.yield() end
                until (not awaitNet)

                local startP = dataPtr + 1
                local chunkSize = math.clamp(dataSize-dataPtr,0,bytesLeft)
                dataPtr = dataPtr + chunkSize
                local endP = dataPtr

                local finalMsg = (dataPtr == dataSize)

                local chunk = data:sub(startP,endP)

                net.start("kl:bns")
                net.writeUInt(chunkSize,14)
                net.writeData(chunk,chunkSize)
                net.writeBool(finalMsg)
                if finalMsg then net.writeUInt(streamID,32) end
                old_net_send(ply)

                coroutine.yield()
            until (finalMsg)

            table.remove(sendQueue,1)
        end)
        table.insert(sendQueue,co)

        hook.add("tick","kl:bns_sendQueue",function()
            if table.isEmpty(sendQueue) then hook.remove("tick","kl:bns_sendQueue") return end
            sendQueue[1]()
        end)

        old_net_send(ply)
        net.send = old_net_send
    end
end

local receivers = {}
local function checkReceives()
    for _,receiver in pairs(receivers) do
        receiver()
    end
end

local receiveBuffer = {}
function net.readBStream(cbFunc)
    local compressed = net.readBool()
    local streamID = net.readUInt(32)

    receivers[streamID] = coroutine.wrap(function()
        local data
        repeat
            data = receiveBuffer[streamID]
            if not data then coroutine.yield() end
        until (data)

        receiveBuffer[streamID] = nil

        if compressed then data = bit.decompress(data) end
        cbFunc(data)

        receivers[streamID] = nil
    end)

    checkReceives()
end

local chunks = {}
net.receive("kl:bns",function()
    local chunkSize = net.readUInt(14)

    local chunk = net.readData(chunkSize)
    table.insert(chunks,chunk)

    local finalMsg = net.readBool()
    if not finalMsg then return end

    local streamID = net.readUInt(32)
    receiveBuffer[streamID] = table.concat(chunks)
    checkReceives()

    chunks = {}
end)